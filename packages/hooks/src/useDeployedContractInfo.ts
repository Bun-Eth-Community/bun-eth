import { useEffect, useState } from "react";
import { usePublicClient } from "wagmi";
import type { Abi, Address } from "viem";
import type { DeployedContractInfo, ContractName } from "./types";

/**
 * Gets the deployed contract info from the generated deployments file
 * @param contractName - name of the contract
 * @returns the deployed contract info (address and ABI)
 */
export const useDeployedContractInfo = <TContractName extends ContractName>(
  contractName: TContractName
): DeployedContractInfo | undefined => {
  const [deployedContractInfo, setDeployedContractInfo] = useState<DeployedContractInfo | undefined>();
  const publicClient = usePublicClient();

  useEffect(() => {
    const loadContract = async () => {
      try {
        // TODO: Load from generated deployedContracts.ts
        // For now, return undefined - will be implemented with hot reload system
        const chainId = publicClient?.chain?.id;

        if (!chainId) {
          console.warn("Chain ID not available");
          return;
        }

        // Dynamic import of deployed contracts
        // This will be generated by the foundry-deployer package
        const deployedContracts = await import("../../../contracts/deployedContracts").catch(() => null);

        if (!deployedContracts) {
          console.warn("No deployed contracts found");
          return;
        }

        const contract = deployedContracts.default?.[chainId]?.[contractName];

        if (contract) {
          // Verify contract is deployed by checking bytecode
          const code = await publicClient?.getBytecode({ address: contract.address });

          if (code && code !== "0x") {
            setDeployedContractInfo({
              address: contract.address as Address,
              abi: contract.abi as Abi,
            });
          } else {
            console.warn(`Contract ${String(contractName)} not deployed at ${contract.address}`);
          }
        }
      } catch (error) {
        console.error("Error loading deployed contract info:", error);
      }
    };

    loadContract();
  }, [contractName, publicClient]);

  return deployedContractInfo;
};
