import { writeFileSync, mkdirSync } from "fs";
import { dirname } from "path";
import { format } from "prettier";
import { loadFoundryDeployment } from "./loader";
import type { GeneratorConfig } from "./types";

/**
 * Generates TypeScript file with deployed contract information
 * This enables hot reload - when contracts are redeployed, this file updates
 * and Next.js Fast Refresh automatically updates the UI
 */
export async function generateDeployedContracts(config: GeneratorConfig): Promise<void> {
  const { foundryRoot, outputPath, networks } = config;

  const defaultNetworks = networks || {
    31337: { name: "localhost", deploymentDir: "31337" },
  };

  console.log("ðŸ”¥ Generating deployed contracts file...");

  // Load deployments for all networks
  const allDeployments: Record<number, any> = {};

  for (const [chainIdStr, networkConfig] of Object.entries(defaultNetworks)) {
    const chainId = parseInt(chainIdStr);
    console.log(`ðŸ“¡ Loading deployments for ${networkConfig.name} (${chainId})...`);

    const deployment = loadFoundryDeployment(foundryRoot, chainId);

    if (Object.keys(deployment).length > 0) {
      allDeployments[chainId] = {};

      for (const [contractName, contractData] of Object.entries(deployment)) {
        allDeployments[chainId][contractName] = {
          address: contractData.address,
          abi: contractData.abi,
        };

        console.log(`  âœ… ${contractName} at ${contractData.address}`);
      }
    }
  }

  // Generate TypeScript content
  const content = `/**
 * This file is autogenerated by @bun-eth/foundry-deployer
 * Do not edit manually - changes will be overwritten on next deployment
 */

const deployedContracts = ${JSON.stringify(allDeployments, null, 2)} as const;

export default deployedContracts;
`;

  // Format with Prettier
  const formatted = await format(content, {
    parser: "typescript",
    semi: true,
    singleQuote: false,
    trailingComma: "es5",
  });

  // Ensure output directory exists
  mkdirSync(dirname(outputPath), { recursive: true });

  // Write file
  writeFileSync(outputPath, formatted, "utf-8");

  console.log(`âœ¨ Generated contracts file at ${outputPath}`);
  console.log(`ðŸ“¦ Total contracts: ${Object.values(allDeployments).reduce((acc, chain: any) => acc + Object.keys(chain).length, 0)}`);
}
