version: '3'

vars:
  DOCKER_COMPOSE_FILE: ./docker/docker-compose.yml
  WEB_PORT:
    sh: echo ${WEB_PORT:-3000}
  API_PORT:
    sh: echo ${API_PORT:-3001}
  ANVIL_PORT:
    sh: echo ${ANVIL_PORT:-3002}

tasks:
  # Installation
  install:
    desc: Install all dependencies
    cmds:
      - bun install

  # Development
  dev:up:
    desc: Start local development stack (Web UI + API + Anvil node)
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} up --build -d
      - mkdir -p .task
      - |
        cd apps/web
        nohup bun run dev > ../../.task/web.log 2>&1 &
        WEB_PID=$!
        cd ../..
        echo $WEB_PID > .task/web.pid
      - echo "Development stack started"
      - echo ""
      - echo "Services:"
      - echo "Web UI at http://localhost:{{.WEB_PORT}}"
      - echo "API at http://localhost:{{.API_PORT}}"
      - echo "Anvil at http://localhost:{{.ANVIL_PORT}}"
      - echo ""
      - echo "View logs with task dev:logs:web, task dev:logs:api, or task dev:logs:anvil"
      - echo ""
      - echo "Health check at http://localhost:{{.API_PORT}}/health"

  dev:auto-ports:
    desc: Automatically find and configure free ports
    cmds:
      - bash scripts/auto-port-setup.sh

  dev:down:
    desc: Stop local development stack
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} down -v
      - |
        if [ -f .task/web.pid ]; then
          kill $(cat .task/web.pid) 2>/dev/null || true
          rm .task/web.pid
          echo "Web dev server stopped"
        fi
      - echo "Development stack stopped"

  dev:logs:
    desc: View logs from development stack
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} logs -f

  dev:logs:api:
    desc: View API logs
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} logs -f api

  dev:logs:anvil:
    desc: View Anvil node logs
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} logs -f anvil

  dev:logs:web:
    desc: View Web UI logs
    cmds:
      - |
        if [ -f .task/web.log ]; then
          tail -f .task/web.log
        else
          echo "Web dev server is not running or log file not found"
          echo "Start it with: task dev:up"
        fi

  dev:restart:
    desc: Restart development stack
    cmds:
      - task: dev:down
      - task: dev:up

  # Contracts
  contracts:compile:
    desc: Compile smart contracts
    dir: packages/contracts
    cmds:
      - forge build

  contracts:deploy:
    desc: Deploy contracts to local network
    dir: packages/contracts
    cmds:
      - forge script script/Deploy.s.sol:DeployScript --rpc-url http://localhost:{{.ANVIL_PORT}} --broadcast --legacy
      - task: contracts:generate

  contracts:deploy:sepolia:
    desc: Deploy contracts to Sepolia testnet
    dir: packages/contracts
    cmds:
      - |
        if [ -z "$SEPOLIA_RPC_URL" ]; then
          echo "‚ùå Error: SEPOLIA_RPC_URL not set"
          echo ""
          echo "Quick setup:"
          echo "  1. cp .env.example .env"
          echo "  2. Add SEPOLIA_RPC_URL to .env"
          echo "  3. Add PRIVATE_KEY to .env"
          echo ""
          echo "See docs/DEPLOYMENT_GUIDE.md for detailed instructions"
          exit 1
        fi
      - |
        if [ -z "$PRIVATE_KEY" ]; then
          echo "‚ùå Error: PRIVATE_KEY not set"
          echo ""
          echo "Add your wallet private key to .env file"
          echo "See docs/DEPLOYMENT_GUIDE.md for instructions"
          exit 1
        fi
      - FOUNDRY_DISABLE_NIGHTLY_WARNING=true forge script script/Deploy.s.sol:DeployScript --rpc-url $SEPOLIA_RPC_URL --private-key $PRIVATE_KEY --broadcast --verify --etherscan-api-key ${ETHERSCAN_API_KEY:-}

  contracts:test:
    desc: Run contract tests
    dir: packages/contracts
    cmds:
      - forge test -vv

  contracts:generate:
    desc: Generate TypeScript from deployed contracts (enables hot reload)
    cmds:
      - bun run packages/foundry-deployer/src/cli.ts
      - echo "‚ú® Contract types generated! Frontend will hot reload."

  contracts:node:
    desc: Run standalone Anvil node
    dir: packages/contracts
    cmds:
      - anvil

  # Building
  build:
    desc: Build all packages (libraries only, no apps)
    env:
      NODE_ENV: production
    cmds:
      - bun run build

  build:web:
    desc: Build Next.js web app for deployment
    dir: apps/web
    env:
      NODE_ENV: production
    cmds:
      - bun run build

  build:all:
    desc: Build everything (packages + web app)
    env:
      NODE_ENV: production
    cmds:
      - bun run build:all

  deploy:web:
    desc: Build and prepare web app for deployment
    cmds:
      - task: build:web

  # Web Development
  web:dev:
    desc: Start Next.js development server
    dir: apps/web
    cmds:
      - bun run dev

  web:build:
    desc: Build Next.js for production
    dir: apps/web
    cmds:
      - bun run build

  web:start:
    desc: Start Next.js production server
    dir: apps/web
    cmds:
      - bun run start

  # Testing
  test:
    desc: Run unit tests (core + sdk)
    cmds:
      - bun test packages/core packages/sdk

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - bun test --watch packages/core packages/sdk

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - bun test --coverage

  test:contracts:
    desc: Run contract tests only
    cmds:
      - task: contracts:test

  test:api:
    desc: Run API tests
    dir: apps/api
    cmds:
      - bun test

  test:sdk:
    desc: Run SDK tests
    dir: packages/sdk
    cmds:
      - bun test

  test:core:
    desc: Run core tests
    dir: packages/core
    cmds:
      - bun test

  test:e2e:
    desc: Run end-to-end tests for web app
    dir: apps/web
    cmds:
      - bun run test:e2e

  test:e2e:ui:
    desc: Run end-to-end tests in UI mode
    dir: apps/web
    cmds:
      - bun run test:e2e:ui

  test:e2e:template:
    desc: Run template creation e2e tests
    cmds:
      - bun test tests/e2e/*.test.ts

  test:all:
    desc: Run all tests (unit + contracts + web e2e + template e2e)
    cmds:
      - task: test
      - task: test:contracts
      - task: test:e2e
      - task: test:e2e:template

  # Linting
  lint:
    desc: Lint all packages
    cmds:
      - bun run lint

  # Cleaning
  clean:
    desc: Clean build artifacts and dependencies
    cmds:
      - rm -rf node_modules
      - rm -rf apps/*/node_modules
      - rm -rf packages/*/node_modules
      - rm -rf packages/contracts/artifacts
      - rm -rf packages/contracts/cache
      - rm -rf packages/contracts/typechain-types
      - echo "Cleaned all build artifacts"

  clean:cache:
    desc: Clean Foundry cache and artifacts
    dir: packages/contracts
    cmds:
      - rm -rf out cache
      - echo "Cleaned contract artifacts"

  # Database/State management
  db:reset:
    desc: Reset local blockchain state
    cmds:
      - task: dev:down
      - echo "Blockchain state reset"

  # Utilities
  status:
    desc: Show status of development stack
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE_FILE}} ps

  check:health:
    desc: Check API health
    cmds:
      - curl -s http://localhost:{{.API_PORT}}/health | jq .

  # Quick start
  start:
    desc: Quick start - install, compile, and run dev stack
    cmds:
      - task: install
      - task: contracts:compile
      - task: dev:up
      - echo ""
      - echo "üöÄ Bun-Eth is ready!"
      - echo ""
      - echo "Open http://localhost:{{.WEB_PORT}} in your browser"
      - echo ""
      - echo "Next steps:"
      - echo "  - Deploy contracts with 'task contracts:deploy'"
      - echo "  - Run tests with 'task test'"
      - echo "  - View logs with 'task dev:logs'"

  # Setup - full local setup with environment and tests
  setup:
    desc: Complete local setup - env, install, compile, and test
    cmds:
      - echo "Starting complete local setup..."
      - |
        if [ ! -f .env ]; then
          echo "Creating .env from .env.example..."
          cp .env.example .env
          echo ".env created"
        else
          echo ".env already exists"
        fi
      - echo "Installing dependencies..."
      - task: install
      - echo "Compiling contracts..."
      - task: contracts:compile
      - echo "Running tests..."
      - bun test packages/core packages/sdk
      - task: contracts:test
      - echo ""
      - echo "Setup complete! All tests passing."
      - echo ""
      - echo "Next steps:"
      - echo "  - Start dev stack with 'task dev:up'"
      - echo "  - Deploy contracts with 'task contracts:deploy'"
      - echo "  - Check API health with 'task check:health'"
